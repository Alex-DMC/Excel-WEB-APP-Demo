(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.excel = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const button = [
    {
        cmd: 'open',
        text: '打开',
        disabled: true,
    }, {
        cmd: 'save',
        text: '保存',
    },
    '|',
    {
        cmd: 'bold',
        text: '加粗',
    }, {
        cmd: 'italic',
        text: '倾斜',
    },
    '|',
    {
        cmd: 'alignLeft',
        text: '左对齐',
    }, {
        cmd: 'alignCenter',
        text: '居中',
    }, {
        cmd: 'alignRight',
        text: '右对齐',
    },
    '|',
    {
        cmd: 'columnAsc',
        text: '正序',
    }, {
        cmd: 'columnDesc',
        text: '倒序',
    },
];
exports.button = button;
const grid = {
    row: 200,
    column: 26,
};
exports.grid = grid;
const column = {
    select: 'A',
};
exports.column = column;
exports.default = button;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layout_1 = require("./config/layout");
const layout_2 = require("./view/layout");
const message_1 = require("./module/message");
class Excel {
    constructor(id = 'app', data = []) {
        this.config = {
            grid: layout_1.grid,
            buttons: layout_1.button,
            column: layout_1.column,
        };
        this.id = id;
        this.view = document.getElementById(id) || null;
        this._column = this.config.column.select || 'A';
        this._data = data;
        if (!this.view) {
            console.error(`The element with ID ${id} did not find the view that could not be initialized.`);
            throw '初始化失败！';
        }
        setTimeout(() => {
            this.init();
        }, 1000);
    }
    init() {
        const layout = this._layout = new layout_2.default(this.view, this.config);
        layout.init().load(this._data);
        const msgbus = new message_1.default(this);
        msgbus.init();
    }
    destroy() {
        this._layout.destroy();
    }
    setCell(id, row, col, value) {
        console.log(`${id} new value "${value}" saved.`);
        if (!this._data[row]) {
            this._data[row] = [];
        }
        this._data[row][col] = value;
    }
    get data() {
        return this._data;
    }
    set data(data) {
        this._data = data;
        if (this._layout) {
            this._layout.load(this._data);
            this._cell = null;
        }
    }
    get cell() {
        return this._cell;
    }
    set cell(cell) {
        this._cell = cell;
    }
    get column() {
        return this._column;
    }
    set column(column) {
        this._column = column;
    }
    get layout() {
        return this._layout;
    }
}
exports.default = Excel;
},{"./config/layout":1,"./module/message":5,"./view/layout":8}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const message_1 = require("../module/message");
class Cell {
    constructor(id) {
        this._edit = false;
        console.log(`Select cell: ${id}.`);
        this._id = id;
        this._row = parseInt(id.substr(1)) - 1;
        this._col = id.charCodeAt(0) - 65;
        this._cell = document.querySelector(`.excel-content td[data-id=${id}]`);
        this._value = this._cell.innerText;
    }
    get id() {
        return this._id;
    }
    addClass(className) {
        if (-1 == this._cell.className.indexOf(className)) {
            this._cell.className = this._cell.className ? this._cell.className + ` ${className}` : className;
        }
    }
    removeClass(className) {
        let clss = this._cell.className.split(' ');
        let ix = clss.indexOf(className);
        if (-1 < ix) {
            clss.splice(ix, 1);
            this._cell.className = clss.join(' ');
        }
    }
    triggerClass(className) {
        let clss = this._cell.className.split(' ');
        let ix = clss.indexOf(className);
        if (-1 < ix) {
            clss.splice(ix, 1);
            this._cell.className = clss.join(' ');
        }
        else {
            this._cell.className = this._cell.className ? this._cell.className + ` ${className}` : className;
        }
    }
    compute() {
        if (this._value != this._cell.innerText) {
            this._value = this._cell.innerText = eval(this._cell.innerText);
            const range = window.getSelection();
            range.selectAllChildren(this._cell);
            range.collapseToEnd();
        }
        return this;
    }
    edit() {
        this._edit = true;
        this._cell.setAttribute('contenteditable', 'true');
        return this;
    }
    focus() {
        this.addClass('on');
        return this;
    }
    blur() {
        if (this._edit) {
            this._edit = false;
            this._cell.setAttribute('contenteditable', 'false');
        }
        if (this._value != this._cell.innerText) {
            this._value = this._cell.innerText;
            message_1.emit('data', { cmd: 'update', id: this._id, row: this._row, col: this._col, value: this._value });
        }
        this.removeClass('on');
        return this;
    }
    blod() {
        this.triggerClass('strong');
        return this;
    }
    italic() {
        this.triggerClass('italic');
        return this;
    }
    align(align) {
        this.removeClass('left');
        this.removeClass('center');
        this.removeClass('right');
        this.triggerClass(align);
        return this;
    }
}
exports.default = Cell;
},{"../module/message":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Export {
    constructor(data) {
        this._data = data;
    }
    csv(fileName = '') {
        if (this._data instanceof Array == false) {
            throw '数据格式不正确，无法进行导出！';
        }
        let tmp = [];
        for (let row of this._data) {
            for (let cell of row) {
                tmp.push(`${cell || ''},`);
            }
            tmp.push('\n');
        }
        let uri = 'data:text/csv;charset=utf-8,\ufeff' + encodeURIComponent(tmp.join(''));
        let link = document.createElement('a');
        link.href = uri;
        link.download = `${fileName || new Date().getTime()}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}
;
exports.default = Export;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cell_1 = require("./cell");
const export_1 = require("./export");
const sort_1 = require("./sort");
class MessageBus {
    constructor(app) {
        this._app = app;
    }
    init() {
        window.addEventListener('message', this.messageHandler.bind(this));
        return this;
    }
    destroy() {
        window.removeEventListener('message', this.messageHandler);
    }
    messageHandler(event) {
        if ('object' != typeof event || !event.data.hasOwnProperty('type') || 'messageBus' != event.data.type)
            return;
        switch (event.data.comp) {
            case 'toolsbar':
                this.toolsbarHandler(event.data);
                break;
            case 'column':
                this.columnHandler(event.data);
                break;
            case 'cell':
                this.cellHandler(event.data);
                break;
            case 'data':
                this.dataHandler(event.data);
                break;
        }
    }
    toolsbarHandler(data) {
        switch (data.cmd) {
            case 'save':
                new export_1.default(this._app.data).csv();
                break;
            case 'bold':
                if (this._app.cell)
                    this._app.cell.blod();
                break;
            case 'italic':
                if (this._app.cell)
                    this._app.cell.italic();
                break;
            case 'alignLeft':
                if (this._app.cell)
                    this._app.cell.align('left');
                break;
            case 'alignCenter':
                if (this._app.cell)
                    this._app.cell.align('center');
                break;
            case 'alignRight':
                if (this._app.cell)
                    this._app.cell.align('right');
                break;
            case 'columnAsc':
                var sort = new sort_1.default(this._app.data);
                this._app.data = sort.column(this._app.column, sort.ASC);
                break;
            case 'columnDesc':
                var sort = new sort_1.default(this._app.data);
                this._app.data = sort.column(this._app.column, sort.DESC);
                break;
        }
    }
    cellHandler(data) {
        if (this._app.cell && this._app.cell.id != data.id) {
            this._app.cell.blur();
            this._app.cell = null;
        }
        let cell = this._app.cell;
        if (!cell) {
            cell = this._app.cell = new cell_1.default(data.id);
        }
        switch (data.cmd) {
            case 'compute':
                cell.compute();
                break;
            case 'edit':
                cell.edit();
                break;
            case 'select':
                cell.focus();
                this._app.layout.footerbar.cellName = data.id;
                break;
        }
    }
    columnHandler(data) {
        switch (data.cmd) {
            case 'select':
                this._app.column = data.id;
                this._app.layout.footerbar.columnName = data.id;
                break;
        }
    }
    dataHandler(data) {
        switch (data.cmd) {
            case 'update':
                let { id, row, col, value } = data;
                this._app.setCell(id, row, col, value);
                break;
        }
    }
}
exports.MessageBus = MessageBus;
function emit(component, data) {
    window.postMessage(Object.assign(data, { type: 'messageBus', comp: component }), '*');
}
exports.emit = emit;
exports.default = MessageBus;
},{"./cell":3,"./export":4,"./sort":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Sort {
    constructor(data) {
        this.ASC = 1;
        this.DESC = 0;
        this._data = data;
    }
    column(columnName, asc = 1, passTitle = true) {
        let col = this.convIndexByColumn(columnName);
        let tas;
        const ascend = (col) => {
            return (a, b) => {
                if (isNaN(a[col]) && isNaN(b[col]))
                    return a[col] > b[col] ? 1 : -1;
                return a[col] - b[col];
            };
        };
        const descend = (col) => {
            return (a, b) => {
                if (isNaN(a[col]) && isNaN(b[col]))
                    return b[col] > a[col] ? 1 : -1;
                return b[col] - a[col];
            };
        };
        if (passTitle)
            tas = this._data.splice(0, 1);
        if (asc) {
            this._data.sort(ascend(col));
        }
        else {
            this._data.sort(descend(col));
        }
        if (passTitle && tas)
            this._data.unshift(...tas);
        return this._data;
    }
    convIndexByColumn(columnName) {
        return columnName.charCodeAt(0) - 65;
    }
}
exports.default = Sort;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Footerbar {
    constructor(app, config = null) {
        this.app = app;
        this.content = app.querySelector('.excel-footbar');
        this._columnName = config.column.select || 'A';
    }
    init() {
        this.render();
        return this;
    }
    destroy() {
        this.content = null;
    }
    render() {
        this.content.innerHTML = `
            <span>排序列: <strong>${this._columnName}</strong></span>
            <span>已选单元格: <strong>${this._cellName || '未选择'}</strong></span>
        `;
    }
    set cellName(cellName) {
        this._cellName = cellName;
        this.render();
    }
    set columnName(columnName) {
        this._columnName = columnName;
        this.render();
    }
}
exports.default = Footerbar;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const toolsbar_1 = require("./toolsbar");
const footerbar_1 = require("./footerbar");
const message_1 = require("../module/message");
class Layout {
    constructor(view, config) {
        this.view = view;
        this.config = config;
        this.row = config.grid.row || 200;
        this.col = config.grid.column || 26;
        this.app = document.createElement('div');
        this.app.id = 'app-excel';
        this.app.className = 'excel';
        this.app.innerHTML = template;
        this.content = this.app.querySelector('.excel-content');
    }
    init() {
        this.view.innerHTML = '';
        this.view.appendChild(this.app);
        const labelCol = this.app.querySelector('.excel-label--column');
        let labels = [];
        for (let i = 0; i < this.col; i++) {
            labels.push(`<span class="label">${String.fromCharCode(65 + i)}</span>`);
        }
        labelCol.innerHTML = labels.join('');
        const labelRow = this.app.querySelector('.excel-label--row');
        labels = [];
        for (let i = 0; i < this.row; i++) {
            labels.push(`<span class="label">${i + 1}</span>`);
        }
        labelRow.innerHTML = labels.join('');
        const toolsbar = this._toolsbar = new toolsbar_1.default(this.app, this.config);
        toolsbar.init().bindEvent();
        const footerbar = this._footerbar = new footerbar_1.default(this.app, this.config);
        footerbar.init();
        this.app.addEventListener('click', event.click, true);
        this.app.addEventListener('dblclick', event.dblclick, true);
        this.app.addEventListener('keyup', event.keyup, true);
        return this;
    }
    destroy() {
        this.app.removeEventListener('click', event.click, true);
        this.app.removeEventListener('dblclick', event.dblclick, true);
        this.app.removeEventListener('keyup', event.keyup, true);
    }
    load(data = []) {
        const tables = [];
        for (let r = 0; r < this.row; r++) {
            tables.push('<tr>');
            for (let c = 0; c < this.col; c++) {
                tables.push(`<td data-id="${String.fromCharCode(65 + c) + (r + 1)}">${data[r] && data[r][c] ? data[r][c] : ''}</td>`);
            }
            tables.push('</tr>');
        }
        this.content.innerHTML = tables.join('');
        return this;
    }
    get toolsbar() {
        return this._toolsbar;
    }
    get footerbar() {
        return this._footerbar;
    }
}
;
const template = `
    <div class="excel-toolbar"></div>
    <div class="excel-window">
        <div class="excel-label--column"></div>
        <div class="excel-panel">
            <div class="excel-label--row"></div>
            <table class="excel-content"></table>
        </div>
    </div>
    <div class="excel-footbar"></div>
`;
const event = {
    click(event) {
        switch (event.target.nodeName) {
            case 'TD':
                message_1.emit('cell', { cmd: 'select', id: event.target.dataset.id });
                break;
            case 'SPAN':
                let name = event.target.innerText;
                if (/^[A-Z]{1}$/.test(name)) {
                    message_1.emit('column', { cmd: 'select', id: name });
                }
                break;
        }
    },
    dblclick(event) {
        switch (event.target.nodeName) {
            case 'TD':
                message_1.emit('cell', { cmd: 'edit', id: event.target.dataset.id });
                break;
        }
    },
    keyup(event) {
        switch (event.target.nodeName) {
            case 'TD':
                if ('Enter' == event.key) {
                    message_1.emit('cell', { cmd: 'compute', id: event.target.dataset.id });
                }
                break;
        }
    },
};
exports.default = Layout;
},{"../module/message":5,"./footerbar":7,"./toolsbar":9}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const message_1 = require("../module/message");
class Toolsbar {
    constructor(app, config) {
        this.app = app;
        this.config = config;
        this.buttons = config.buttons || {};
        this.content = app.querySelector('.excel-toolbar');
    }
    init() {
        const btns = [];
        for (let btn of this.buttons) {
            if ('|' === btn) {
                btns.push('<hr class="sp" />');
            }
            else {
                btns.push(`<button type="button" data-cmd="${btn.cmd}" ${btn.disabled ? 'disabled' : ''} class="excel-toolbar--btn">${btn.text}</button>`);
            }
        }
        this.content.innerHTML = btns.join('');
        return this;
    }
    bindEvent() {
        this.content.addEventListener('click', event.click, true);
        return this;
    }
    destroy() {
        this.content.removeEventListener('click', event.click, true);
        this.content = null;
    }
}
const event = {
    click(event) {
        if ('BUTTON' != event.target.nodeName)
            return;
        const cmd = event.target.dataset.cmd;
        switch (cmd) {
            default:
                message_1.emit('toolsbar', { cmd });
        }
    },
};
exports.default = Toolsbar;
},{"../module/message":5}]},{},[2])(2)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
